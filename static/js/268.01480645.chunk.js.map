{"version":3,"file":"static/js/268.01480645.chunk.js","mappings":"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","sources":["Page/CurrencyPage/CurrencyPage.styled.js","Page/CurrencyPage/CurrencyPage.jsx","components/Currency/CurrencyStyled.js","redux/currencyRedusers/currencySelectors.js","components/Currency/Currency.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledBox = styled.div`\n  max-width: 480px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n","import Currency from 'components/Currency/Currency';\nimport { StyledBox } from './CurrencyPage.styled';\n\nconst CurrencyPage = () => {\n  return (\n    <div>\n      <StyledBox>\n        <Currency />\n      </StyledBox>\n    </div>\n  );\n};\n\nexport default CurrencyPage;\n","import styled from 'styled-components';\nimport { Oval } from 'react-loader-spinner';\n\nexport const StyledBox = styled.div`\n  /* font-family: 'Poppins Regular', sans-serif; */\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  max-width: ${props => props.maxw || '480px'};\n`;\n\nexport const StyledTable = styled.div`\n  max-height: 170px;\n  width: 100%;\n`;\n\nexport const StyledTableHead = styled.div`\n  background: rgba(82, 59, 126, 0.60);\n  padding-left: ${props => props.padL || '62px'};\n  margin-bottom: ${props => props.marB || '24px'};\n`;\n\nexport const StyledThBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 50px;\n  padding: 16px 0;\n`;\n\nexport const StyledTdBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  text-align: start;\n  gap: 50px;\n`;\n\nexport const StyledTBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-left: ${props => props.padL || '62px'};\n  gap: ${props => props.gap || '24px'};\n  margin-bottom: 6px;\n`;\n\nexport const StyledTh = styled.span`\n  color: var(--white, #fbfbfb);\n  /* font-family: 'Poppins SemiBold'; */\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: calc(16 / 24);\n  text-align: center;\n  &:last-child {\n  }\n  &:first-child {\n  }\n`;\n\nexport const StyledTd = styled.span`\n  display: inline-block;\n  color: var(--white, #fbfbfb);\n  /* font-family: 'Poppins Regular'; */\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: calc(24 / 16);\n  text-align: center;\n  width: 62px;\n  &:last-child {\n    width: 42px;\n  }\n  &:first-child {\n    width: 65px;\n  }\n`;\n\nexport const StyledOval = styled(Oval)`\n  filter: drop-shadow(0px 3px 10px rgba(74, 86, 226, 0.5));\n`;\n\nexport const StyledImg = styled.img`\n  display: inline-block;\n  width: ${props => props.w || '480px'};\n`;\n\n// 96\n","export const currencySelector = state => state.currency.data;\n\nexport const isLoadingSelector = state => state.currency.isLoading;\n","import { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport {\n  StyledBox,\n  StyledImg,\n  StyledOval,\n  StyledTBody,\n  StyledTable,\n  StyledTableHead,\n  StyledTd,\n  StyledTdBox,\n  StyledTh,\n  StyledThBox,\n} from './CurrencyStyled';\nimport { currencyThunk } from 'redux/currencyRedusers/currencyThunk';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  currencySelector,\n  isLoadingSelector,\n} from 'redux/currencyRedusers/currencySelectors';\nimport { useMediaQuery } from 'react-responsive';\n\nconst Currency = () => {\n  const [currency, setCurrency] = useState([]);\n  const dispatch = useDispatch();\n  const selectedCurrency = useSelector(currencySelector);\n  const isLoading = useSelector(isLoadingSelector);\n  const token = useSelector(state => state.auth.token);\n\n  const updateLastUpdatedTime = () => {\n    const newTime = Date.now();\n    localStorage.setItem('lastUpdatedTime', newTime);\n  };\n\n  useEffect(() => {\n    if (!token) return;\n    const lastUpdatedTime = localStorage.getItem('lastUpdatedTime');\n\n    const isHourPassed = () => {\n      const ONE_HOUR_IN_MS = 60 * 60 * 1000;\n      return Date.now() - Number(lastUpdatedTime) >= ONE_HOUR_IN_MS;\n    };\n\n    if (isHourPassed() || !lastUpdatedTime) {\n      dispatch(currencyThunk());\n      setCurrency(selectedCurrency);\n      updateLastUpdatedTime();\n    } else {\n      setCurrency(selectedCurrency);\n    }\n  }, [dispatch, selectedCurrency, token]);\n\n\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n  const isTabletAndMobile = useMediaQuery({ minWidth: 768, maxWidth: 1279 });\n  const isDesktop = useMediaQuery({ minWidth: 1280 });\n\n  return (\n    <div>\n      {isDesktop && (\n        <StyledBox ai=\"center\" jc=\"center\">\n          {isLoading ? (\n            <>\n              <StyledOval\n                height={40}\n                width={40}\n                color=\"#4a56e2\"\n                wrapperStyle={{}}\n                wrapperClass=\"\"\n                visible={true}\n                ariaLabel=\"oval-loading\"\n                secondaryColor=\"#4a56e2\"\n                strokeWidth={4}\n                strokeWidthSecondary={4}\n              />\n            </>\n          ) : (\n            <StyledBox>\n              <StyledTable>\n                <StyledTableHead>\n                  <StyledThBox>\n                    <StyledTh>Currency</StyledTh>\n                    <StyledTh>Purchase</StyledTh>\n                    <StyledTh>Sale</StyledTh>\n                  </StyledThBox>\n                </StyledTableHead>\n                <StyledTBody>\n                  {currency?.length &&\n                    currency.map(el => {\n                      return (\n                        <StyledTdBox key={nanoid()}>\n                          <StyledTd>{el.currencyName}</StyledTd>\n                          <StyledTd>{el.rateBuy}</StyledTd>\n                          <StyledTd>\n                            {el.rateSell.toString().slice(0, -2)}\n                          </StyledTd>\n                        </StyledTdBox>\n                      );\n                    })}\n                </StyledTBody>\n              </StyledTable>\n              <img src={require('../../svg/currency.png')} alt=\"schedule\" />\n            </StyledBox>\n          )}\n        </StyledBox>\n      )}\n      {isTabletAndMobile && (\n        <StyledBox maxw=\"336px\">\n          {isLoading ? (\n            <>\n              <StyledOval\n                height={40}\n                width={40}\n                color=\"#4a56e2\"\n                wrapperStyle={{}}\n                wrapperClass=\"\"\n                visible={true}\n                ariaLabel=\"oval-loading\"\n                secondaryColor=\"#4a56e2\"\n                strokeWidth={4}\n                strokeWidthSecondary={4}\n              />\n            </>\n          ) : (\n            <>\n              <StyledTable>\n                <StyledTableHead padL=\"20px\" marB=\"8px\">\n                  <StyledThBox>\n                    <StyledTh>Currency</StyledTh>\n                    <StyledTh>Purchase</StyledTh>\n                    <StyledTh>Sale</StyledTh>\n                  </StyledThBox>\n                </StyledTableHead>\n                <StyledTBody padL=\"20px\" gap=\"12px\">\n                  {currency?.length &&\n                    currency.map(el => {\n                      return (\n                        <StyledTdBox key={nanoid()}>\n                          <StyledTd>{el.currencyName}</StyledTd>\n                          <StyledTd>{el.rateBuy}</StyledTd>\n                          <StyledTd>\n                            {el.rateSell.toString().slice(0, -2)}\n                          </StyledTd>\n                        </StyledTdBox>\n                      );\n                    })}\n                </StyledTBody>\n              </StyledTable>\n              <StyledImg\n                src={require('../../svg/currency-tablet.png')}\n                alt=\"schedule\"\n                w=\"336px\"\n              />\n            </>\n          )}\n        </StyledBox>\n      )}\n      {isMobile && (\n        <StyledBox maxw=\"336px\">\n          {isLoading ? (\n            <>\n              <StyledOval\n                height={40}\n                width={40}\n                color=\"#4a56e2\"\n                wrapperStyle={{}}\n                wrapperClass=\"\"\n                visible={true}\n                ariaLabel=\"oval-loading\"\n                secondaryColor=\"#4a56e2\"\n                strokeWidth={4}\n                strokeWidthSecondary={4}\n              />\n            </>\n          ) : (\n            <>\n              <StyledTable>\n                <StyledTableHead padL=\"20px\" marB=\"8px\">\n                  <StyledThBox>\n                    <StyledTh>Currency</StyledTh>\n                    <StyledTh>Purchase</StyledTh>\n                    <StyledTh>Sale</StyledTh>\n                  </StyledThBox>\n                </StyledTableHead>\n                <StyledTBody padL=\"20px\" gap=\"12px\">\n                  {currency?.length &&\n                    currency.map(el => {\n                      return (\n                        <StyledTdBox key={nanoid()}>\n                          <StyledTd>{el.currencyName}</StyledTd>\n                          <StyledTd>{el.rateBuy}</StyledTd>\n                          <StyledTd>\n                            {el.rateSell.toString().slice(0, -2)}\n                          </StyledTd>\n                        </StyledTdBox>\n                      );\n                    })}\n                </StyledTBody>\n              </StyledTable>\n              <StyledImg\n                src={require('../../svg/currency-tablet.png')}\n                alt=\"schedule\"\n                w=\"336px\"\n              />\n            </>\n          )}\n        </StyledBox>\n      )}\n    </div>\n  );\n};\n\nexport default Currency;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["StyledBox","styled","_templateObject","_taggedTemplateLiteral","_jsx","children","Currency","props","maxw","StyledTable","_templateObject2","StyledTableHead","_templateObject3","padL","marB","StyledThBox","_templateObject4","StyledTdBox","_templateObject5","StyledTBody","_templateObject6","gap","StyledTh","_templateObject7","StyledTd","_templateObject8","StyledOval","Oval","_templateObject9","StyledImg","_templateObject10","w","currencySelector","state","currency","data","isLoadingSelector","isLoading","_useState","useState","_useState2","_slicedToArray","setCurrency","dispatch","useDispatch","selectedCurrency","useSelector","token","auth","useEffect","lastUpdatedTime","localStorage","getItem","Date","now","Number","currencyThunk","newTime","setItem","updateLastUpdatedTime","isMobile","useMediaQuery","maxWidth","isTabletAndMobile","minWidth","isDesktop","_jsxs","ai","jc","_Fragment","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","length","map","el","currencyName","rateBuy","rateSell","toString","slice","nanoid","src","require","alt","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toUpperCase"],"sourceRoot":""}